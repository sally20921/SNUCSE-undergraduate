#!/usr/bin/env ruby
require 'parallel'
require 'diffy'
require 'json'
include Diffy
Diff.default_format = :color

def test(i, arg, verbose)
  num = '%03d' % i

  msg = `java -ea Subway fixtures/#{arg} < fixtures/stdin_#{num} 2>&1 1>fixtures/stdout_#{num}`
  if not $?.success?
    puts "#{num}: Aborted (#{msg})"
  elsif not msg.empty?
    puts "#{num}: Failed (#{msg})"
  else
    expected = File.read("fixtures/expected_#{num}")
    stdout   = File.read("fixtures/stdout_#{num}")

    begin
      assert = ->(cond, msg){ unless cond; raise msg; end }
      exp = expected.lines
      out = stdout.lines

      assert.call exp.size == out.size, '크기가 다름'
      assert.call exp.size.even?, '짝수가 아님'
      (1...exp.size).step(2) do |linenum|
        lhs = exp[linenum]
        rhs = out[linenum]

        assert.call lhs == rhs, '최소값을 못찾았음'
        assert.call (/\A\d+\z/ === lhs.chomp), '출력 포맷이 틀림'
      end
      puts "#{num}: OK" if verbose
    rescue RuntimeError => e
      puts "#{num}: Wrong Answer (#{e.message})"
      puts Diff.new(expected, stdout) if verbose
    end
  end
  `rm -f fixtures/stdout_#{num}`
end

db = JSON.parse(File.read('fixtures/db.json')).flat_map { |arg, nums| nums.map { |i| [i, arg] } }.to_h
if ARGV.empty?
  Parallel.map(db) { |i, arg| test(i, arg, false) }
else
  ARGV.map(&:to_i).map { |n| test(n, db[n], true) }
end
